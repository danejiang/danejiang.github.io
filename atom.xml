<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤街旧巷</title>
  
  <subtitle>实践不经意的仁慈与不自觉的美德！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://danejiang.top/"/>
  <updated>2019-04-24T03:00:05.142Z</updated>
  <id>https://danejiang.top/</id>
  
  <author>
    <name>DaneJiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ServiceMix部署自定义开发程序(ActiveMQ和Kafka实现)</title>
    <link href="https://danejiang.top/2019/04/24/servicemix-example/"/>
    <id>https://danejiang.top/2019/04/24/servicemix-example/</id>
    <published>2019-04-24T01:45:25.000Z</published>
    <updated>2019-04-24T03:00:05.142Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇整理了ServiceMix环境的搭建过程，接下来介绍在ServiceMix平台下如何开发程序并部署到Karaf容器内，同时介绍下karaf容器内置的ActiveMQ消息组件的发送和接收，以及目前应用比较广泛的分布式高吞吐量的消息系统Kafka在Karaf容器中的使用。</p><a id="more"></a><p>首先看下我们开发的程序部署的位置，我们使用Maven打包后的jar文件放在下图的deploy目录下，如果需要用到配置文件，可以放在etc目录下，该目录对应你Maven程序里的etc目录：<br><img src="/images/servicemix-01.jpg" alt></p><p>1.用IntelliJ创建maven项目，修改pom内容，定义项目名称和创建apache felix的plugin配置，并增加引用Kafka，完整内容请查阅后面的源码文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.danejiang&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;BundleTest&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;bundle&lt;/packaging&gt;</span><br><span class="line">&lt;name&gt;DaneJiang BundleTest&lt;/name&gt;</span><br><span class="line">&lt;description&gt;DaneJiang BundleTest&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.jmdns&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jmdns&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p><p>2.创建activemq.java，实现ActiveMQ的生产者发送消息、消费者接收消息处理和停止操作：<br>ActiveMQ生产者发送消息代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public static boolean send(String topicType,String topicName, String topicMessage) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 创建连接工厂</span><br><span class="line">        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(&quot;tcp://0.0.0.0:61616&quot;);</span><br><span class="line"></span><br><span class="line">        // 创建JMS连接实例，并启动连接</span><br><span class="line">        Connection connection = factory.createConnection(&quot;smx&quot;, &quot;smx&quot;);</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        // 创建Session对象，不开启事务</span><br><span class="line">        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        // 创建主题和生成者：按消息类型分别处理</span><br><span class="line">        MessageProducer producer = null;</span><br><span class="line">        if(topicType.toLowerCase().equals(&quot;queue&quot;))&#123;</span><br><span class="line">            // 创建主题</span><br><span class="line">            Queue queue = session.createQueue(topicName);</span><br><span class="line"></span><br><span class="line">            // 创建生成者</span><br><span class="line">            producer = session.createProducer(queue);</span><br><span class="line">        &#125;else if(topicType.toLowerCase().equals(&quot;topic&quot;))&#123;</span><br><span class="line">            // 创建主题</span><br><span class="line">            Topic topic = session.createTopic(topicName);</span><br><span class="line"></span><br><span class="line">            // 创建生成者</span><br><span class="line">            producer = session.createProducer(topic);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            logger.info(&quot;Send MQ Message error:not set topic type.&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 设置消息不需持久化。默认消息需要持久化</span><br><span class="line">        //producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line">        producer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line"></span><br><span class="line">        // 创建文本消息  或者其他格式的信息</span><br><span class="line">        TextMessage message = session.createTextMessage(topicMessage);</span><br><span class="line"></span><br><span class="line">        // 发送消息。non-persistent 默认异步发送；persistent 默认同步发送</span><br><span class="line">        producer.send(message);</span><br><span class="line"></span><br><span class="line">        // 关闭会话和连接</span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Send MQ Message:&quot; + topicName);</span><br><span class="line">        return true;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.info(&quot;Send MQ Message error:&quot; + e.toString());</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ActiveMQ消费者代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">private static Connection rConnection= null;</span><br><span class="line">private static Session rSession = null;</span><br><span class="line">private static MessageConsumer rMessageConsumer = null;</span><br><span class="line">   </span><br><span class="line">public static boolean receive(String topicType, String topicName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 创建连接工厂</span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(&quot;tcp://0.0.0.0:61616&quot;);</span><br><span class="line"></span><br><span class="line">        // 创建JMS连接实例，并启动连接</span><br><span class="line">        rConnection = connectionFactory.createConnection(&quot;smx&quot;, &quot;smx&quot;);</span><br><span class="line">        rConnection.start();</span><br><span class="line"></span><br><span class="line">        // 创建Session对象，不开启事务</span><br><span class="line">        rSession = rConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        // 创建主题和消费者：按消息类型分别处理</span><br><span class="line">        if (topicType.toLowerCase().equals(&quot;queue&quot;)) &#123;</span><br><span class="line">            // 创建主题</span><br><span class="line">            Queue queue = rSession.createQueue(topicName);</span><br><span class="line"></span><br><span class="line">            // 创建消费者</span><br><span class="line">            rMessageConsumer = rSession.createConsumer(queue);</span><br><span class="line">        &#125; else if (topicType.toLowerCase().equals(&quot;topic&quot;)) &#123;</span><br><span class="line">            // 创建主题</span><br><span class="line">            Topic topic = rSession.createTopic(topicName);</span><br><span class="line"></span><br><span class="line">            // 创建消费者</span><br><span class="line">            rMessageConsumer = rSession.createConsumer(topic);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.info(&quot;Start MQ Message error:not set topic type.&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 异步消费</span><br><span class="line">        rMessageConsumer.setMessageListener(new MessageListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(Message message) &#123;</span><br><span class="line">                TextMessage mess = (TextMessage) message;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //消息处理</span><br><span class="line">                    logger.info(&quot;Receive MQ Message:&quot; + topicName+&quot;,Result:&quot;+ mainService.doMQ(topicName, mess.getText()));</span><br><span class="line">                &#125; catch (JMSException e) &#123;</span><br><span class="line">                    logger.info(&quot;Receive MQ Message error:&quot; + e.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Started receive MQ Message:&quot; + topicName);</span><br><span class="line">        return true;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.info(&quot;Start receive MQ Message error:&quot; + e.toString());</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的方法用于停止消费者的异步消费事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void stop() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 关闭会话和连接</span><br><span class="line">        if (rMessageConsumer != null) rMessageConsumer.close();</span><br><span class="line">        if (rSession != null) rSession.close();</span><br><span class="line">        if (rConnection != null) rConnection.close();</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Stoped MQ Message.&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.info(&quot;Stop MQ Message error:&quot; + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.创建kafka.java，实现Kafka消息组件的生产者发送消息、消费者接收消息处理和停止操作：<br>Kafka生产者代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static boolean send(String topicName, String topicMessage) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(null);</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop01:9092&quot;);</span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line">        props.put(&quot;retries&quot;, 0);</span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);</span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);</span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(topicName, topicMessage));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.info(&quot;Send Kafka Message error:&quot; + e.toString());</span><br><span class="line">            return false;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            producer.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Send Kafka Message:&quot; + topicName);</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125; catch (Exception ex) &#123;</span><br><span class="line">        logger.info(&quot;Send Kafka Message error:&quot; + ex.toString());</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kafka消费者代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private static KafkaConsumer&lt;String, String&gt; kafkaConsumer = null;</span><br><span class="line">public static boolean receive() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(null);</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop01:9092&quot;);</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;Group-1&quot;);</span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);</span><br><span class="line">        props.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        props.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;);</span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        kafkaConsumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        kafkaConsumer.subscribe(Collections.singletonList(&quot;test&quot;));</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat df = new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;);</span><br><span class="line">        new Thread(df.format(new Date())) &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(100);</span><br><span class="line">                    for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                        logger.info(&quot;Receive Kafka Message:&quot; + record.topic()+&quot;,Result:&quot;+ mainService.doKafka(record.topic(),record.value()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.info(&quot;Start receive Kafka Message error:&quot; + e.toString());</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的方法用于停止消费者处理事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void stop() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 关闭会话和连接</span><br><span class="line">        if (kafkaConsumer != null) kafkaConsumer.close();</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Stop Kafka Message.&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.info(&quot;Stop Kafka Message error:&quot; + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.创建main函数，模拟消息组件的启动和停止事件，以及处理过程：<br>start函数启动消费者监听事件，stop函数停止监听，后续这两个函数会和karaf中bundle的启动和停止事件绑定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void start() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //activemq消费者启动</span><br><span class="line">        activemq.receive(&quot;Topic&quot;, &quot;DaneJiang&quot;);</span><br><span class="line"></span><br><span class="line">        //kafka消费者启动</span><br><span class="line">        kafka.receive();</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;MainService start success.&quot;);</span><br><span class="line">    &#125; catch (Exception ex) &#123;</span><br><span class="line">        logger.info(&quot;MainService start error:&quot; + ex.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void stop() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //activemq停止</span><br><span class="line">        activemq.stop();</span><br><span class="line"></span><br><span class="line">        //kafka停止</span><br><span class="line">        kafka.stop();</span><br><span class="line">    &#125; catch (Exception ex) &#123;</span><br><span class="line">        logger.info(&quot;MainService stop error:&quot; + ex.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是接收到消息后的处理事件，具体内容根据需要自行调整：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public static String doMQ(String topicName, String topicMessage) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        switch (topicName.toUpperCase()) &#123;</span><br><span class="line">            case &quot;DANEJIANG&quot;:</span><br><span class="line">                result = topicMessage + &quot; World!&quot;;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                result = &quot;Receive Error Type:Type=&quot; + topicName + &quot;,Message=&quot; + topicMessage;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (Exception ex) &#123;</span><br><span class="line">        logger.info(&quot;doMQ error:&quot; + ex.toString());</span><br><span class="line">        return ex.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doKafka(String topicName, String topicMessage) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        switch (topicName.toUpperCase()) &#123;</span><br><span class="line">            case &quot;DANEJIANG&quot;:</span><br><span class="line">                result = topicMessage + &quot; World!&quot;;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                result = &quot;Receive Error Type:Type=&quot; + topicName + &quot;,Message=&quot; + topicMessage;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (Exception ex) &#123;</span><br><span class="line">        logger.info(&quot;doKafka error:&quot; + ex.toString());</span><br><span class="line">        return ex.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.最后创建文件Activator.java，用于处理bundle启动和停止时触发AceiveMQ和Kafka消息组件的对应事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import com.danejiang.service.mainService;</span><br><span class="line">import org.osgi.framework.BundleActivator;</span><br><span class="line">import org.osgi.framework.BundleContext;</span><br><span class="line"></span><br><span class="line">public class Activator implements BundleActivator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start(BundleContext arg0) throws Exception &#123;</span><br><span class="line">        mainService.start();</span><br><span class="line">        System.out.println(&quot;start bundle!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void stop(BundleContext arg0) throws Exception &#123;</span><br><span class="line">        mainService.stop();</span><br><span class="line">        System.out.println(&quot;stop bundle!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.代码完成后，用maven打包成jar文件，并将程序中lib目录下的jmdns-3.4.1.jar、kafka-clients-2.1.0.jar和lz4-java-1.5.0.jar一并上传至ServiceMix下的deploy目录中：<br><img src="/images/servicemix-02.jpg" alt><br>使用命令bin/client进入karaf，输入bundle:list可以查看到相关组件已经启用：<br><img src="/images/servicemix-03.jpg" alt><br>输入log:display可以查看组件的启动情况：<br><img src="/images/servicemix-04.jpg" alt></p><p>7.文章最后放上这次测试的源代码，水平有限还请各位指正错误，谢谢！<br><a href="https://github.com/danejiang/ServiceMix-Example" target="_blank" rel="noopener">https://github.com/danejiang/ServiceMix-Example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇整理了ServiceMix环境的搭建过程，接下来介绍在ServiceMix平台下如何开发程序并部署到Karaf容器内，同时介绍下karaf容器内置的ActiveMQ消息组件的发送和接收，以及目前应用比较广泛的分布式高吞吐量的消息系统Kafka在Karaf容器中的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="ServiceMix" scheme="https://danejiang.top/categories/ServiceMix/"/>
    
    
      <category term="ServiceMix" scheme="https://danejiang.top/tags/ServiceMix/"/>
    
      <category term="ActiveMQ" scheme="https://danejiang.top/tags/ActiveMQ/"/>
    
      <category term="Kafka" scheme="https://danejiang.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>闲暇好风光</title>
    <link href="https://danejiang.top/2019/04/20/20190420/"/>
    <id>https://danejiang.top/2019/04/20/20190420/</id>
    <published>2019-04-20T10:53:33.000Z</published>
    <updated>2019-04-24T06:54:03.101Z</updated>
    
    <content type="html"><![CDATA[<p>难得出去逛一圈，看看风光，随手拍！<br><img src="/images/20190420_01.jpg" alt><br><img src="/images/20190420_02.jpg" alt><br><img src="/images/20190420_03.jpg" alt><br><img src="/images/20190420_04.jpg" alt><br><img src="/images/20190420_05.jpg" alt><br><img src="/images/20190420_06.jpg" alt><br><img src="/images/20190420_07.jpg" alt><br><img src="/images/20190420_08.jpg" alt><br><img src="/images/20190420_09.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;难得出去逛一圈，看看风光，随手拍！&lt;br&gt;&lt;img src=&quot;/images/20190420_01.jpg&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/images/20190420_02.jpg&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/images/20190420_03.
      
    
    </summary>
    
      <category term="杂谈" scheme="https://danejiang.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="日记" scheme="https://danejiang.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ServiceMix环境搭建</title>
    <link href="https://danejiang.top/2019/04/20/servicemix-setup/"/>
    <id>https://danejiang.top/2019/04/20/servicemix-setup/</id>
    <published>2019-04-19T16:43:16.000Z</published>
    <updated>2019-04-20T12:52:30.454Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目需要，准备用ServiceMix搭建一个ESB服务，用于各系统之间数据接口的通讯；Apache ServiceMix是小巧的开源集成容器，它结合了Apache ActiveMQ、Camel、CXF和Karaf的特性和功能到一个强大的运行平台，你可以用它构建属于自己的集成解决方案。它提供了一个由OSGI技术支持的 全面的企业预备ESB。</p><a id="more"></a><p>下面简单介绍下ServiceMix环境搭建的几个步骤：</p><p>1.首先登陆官网下载安装包，并放到Linux服务器上：<br><a href="http://servicemix.apache.org/downloads.html" target="_blank" rel="noopener">ServiceMix安装包页面</a></p><p>SSH登录服务器，进入安装包所在目录并解压文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf apache-servicemix-7.0.1.tar</span><br></pre></td></tr></table></figure></p><p>进入目录apache-servicemix-7.0.1，输入如下命令，启动ServiceMix：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd apache-servicemix-7.0.1/</span><br><span class="line">bin/start</span><br></pre></td></tr></table></figure></p><p>输入如下命令，进入karaf：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/client</span><br></pre></td></tr></table></figure></p><p><img src="/images/servicemix.jpg" alt></p><p>2.输入如下命令，添加hawtio资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature:repo-add hawtio</span><br></pre></td></tr></table></figure></p><p>再输入如下命令，安装hawtio组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature:install hawtio</span><br></pre></td></tr></table></figure></p><p>安装完后通过访问http://服务器IP:8181，来查看ServiceMix的组件状态和日志：</p><div align="left"><img src="/images/hawtio.jpg" alt></div><p>3.输入如下命令安装wrapper，该组件提供开机自启动的相关命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper:install</span><br></pre></td></tr></table></figure></p><p> 安装完成后，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper</span><br></pre></td></tr></table></figure></p><p>执行完成后，出现如下提示，按系统设置开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* To install the service:</span><br><span class="line">*     $ ln -s /opt/apache-servicemix-7.0.1/bin/karaf-service /etc/init.d/</span><br><span class="line">* </span><br><span class="line">*   To start the service when the machine is rebooted:</span><br><span class="line">*     $ update-rc.d karaf-service defaults</span><br><span class="line">* </span><br><span class="line">*   To disable starting the service when the machine is rebooted:</span><br><span class="line">*     $ update-rc.d -f karaf-service remove</span><br><span class="line">* </span><br><span class="line">*   To start the service:</span><br><span class="line">*     $ /etc/init.d/karaf-service start</span><br><span class="line">* </span><br><span class="line">*   To stop the service:</span><br><span class="line">*     $ /etc/init.d/karaf-service stop</span><br><span class="line">* </span><br><span class="line">*   To uninstall the service :</span><br><span class="line">*     $ rm /etc/init.d/karaf-service</span><br></pre></td></tr></table></figure></p><p>4.安装需要使用的组件，目前我用jetty发布http服务，所以需要安装如下两个组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">feature:install camel-http</span><br><span class="line">feature:install camel-jetty9</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目需要，准备用ServiceMix搭建一个ESB服务，用于各系统之间数据接口的通讯；Apache ServiceMix是小巧的开源集成容器，它结合了Apache ActiveMQ、Camel、CXF和Karaf的特性和功能到一个强大的运行平台，你可以用它构建属于自己的集成解决方案。它提供了一个由OSGI技术支持的 全面的企业预备ESB。&lt;/p&gt;
    
    </summary>
    
      <category term="ServiceMix" scheme="https://danejiang.top/categories/ServiceMix/"/>
    
    
      <category term="ServiceMix" scheme="https://danejiang.top/tags/ServiceMix/"/>
    
      <category term="Karaf" scheme="https://danejiang.top/tags/Karaf/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://danejiang.top/2019/04/19/hello-world/"/>
    <id>https://danejiang.top/2019/04/19/hello-world/</id>
    <published>2019-04-19T12:00:00.000Z</published>
    <updated>2019-04-19T14:59:40.602Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>我的开篇标题，觉得很适合我这种技术宅！</p><p>十年，回想自己的第一个网站和博客，当时的心情很单纯，只想做一个编程技术资料和经验分享的网站；每天不停的访问着自己写的程序，到处推广自己的站点，不断的做SEO优化，看着被谷歌收录的页面逐渐变多，心情无比激动；但持续了一年左右，激情没了，加上网站的美工不行，网站一直没什么人访问，最后放弃了。</p><a id="more"></a><p>虽然有时还会搜索下自己以前的网页，但十年来一直没有下定决心再写一次博客；十年的时间，自己的编程技术略有增长，学习的领域已经有了翻天覆地的变化，目前正在学习大数据相关的技术，后续的文章中我会把学习的经验分享出来。</p><p>此次写博客，不追求形式、内容和时间，想写就写，只希望能记录一些自己在人生路上的点点滴滴，下一个十年来看时不会后悔！</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello World!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我的开篇标题，觉得很适合我这种技术宅！&lt;/p&gt;
&lt;p&gt;十年，回想自己的第一个网站和博客，当时的心情很单纯，只想做一个编程技术资料和经验分享的网站；每天不停的访问着自己写的程序，到处推广自己的站点，不断的做SEO优化，看着被谷歌收录的页面逐渐变多，心情无比激动；但持续了一年左右，激情没了，加上网站的美工不行，网站一直没什么人访问，最后放弃了。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://danejiang.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://danejiang.top/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="日记" scheme="https://danejiang.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
